/*
import { useState } from 'react';
import Button from 'react-bootstrap/Button';
import Modal from 'react-bootstrap/Modal';
import Form from 'react-bootstrap/Form';
import '../css/modalLogin.css';

// eslint-disable-next-line react/prop-types
export default function ModalCadastrarCliente({ show, onHide }) {
  const [formValues, setFormValues] = useState({
    nome: '',
    email: '',
    telefone: '',
    endereco: '',
    genero: '',
    dataNascimento: '',
    password: ''
  });

  const [errors, setErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);

  // Função para lidar com as mudanças nos inputs
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormValues({ ...formValues, [name]: value });
  };

  // Função para validar os dados do formulário
  const validateForm = () => {
    const newErrors = {};

    // Validação do nome
    const nomeRegex = /^[A-Za-zÀ-ÖØ-öø-ÿ\s]+$/;
    if (!formValues.nome) {
      newErrors.nome = 'Nome é obrigatório.';
    } else if (!nomeRegex.test(formValues.nome)) {
      newErrors.nome = 'O nome não pode conter números ou caracteres especiais.';
    }

    // Validação do e-mail
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!formValues.email) {
      newErrors.email = 'E-mail é obrigatório.';
    } else if (!emailRegex.test(formValues.email)) {
      newErrors.email = 'E-mail inválido.';
    }

    // Validação do telefone
    if (!formValues.telefone) {
      newErrors.telefone = 'Telefone é obrigatório.';
    } else if (!/^\d{9,}$/.test(formValues.telefone)) {
      newErrors.telefone = 'Telefone deve conter pelo menos 9 dígitos.';
    }

    // Validação do endereço
    if (!formValues.endereco) {
      newErrors.endereco = 'Endereço é obrigatório.';
    }

    // Validação do gênero
    if (!formValues.genero) {
      newErrors.genero = 'Gênero é obrigatório.';
    }

    // Validação da data de nascimento
    const today = new Date().toISOString().split('T')[0]; // Data atual
    if (!formValues.dataNascimento) {
      newErrors.dataNascimento = 'Data de nascimento é obrigatória.';
    } else if (formValues.dataNascimento > today) {
      newErrors.dataNascimento = 'A data de nascimento não pode ser maior que a data atual.';
    }

    // Validação da senha
    if (!formValues.password) {
      newErrors.password = 'Senha é obrigatória.';
    } else if (formValues.password.length < 6) {
      newErrors.password = 'Senha deve ter pelo menos 6 caracteres.';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleCadastro = async (e) => {
    e.preventDefault();

    if (!validateForm()) return;

    try {
      const response = await fetch('/api/clientes/cadastrar', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formValues),
      });

      if (!response.ok) {
        const errorMessage = await response.text();
        setErrors({ server: errorMessage || 'Erro ao fazer cadastro. Verifique os dados e tente novamente.' });
        return;
      }

      const data = await response.json();
      console.log('Cadastro realizado com sucesso:', data);
      onHide(); // Fechar a modal após o sucesso no cadastro
    } catch (error) {
      console.error('Erro ao fazer cadastro:', error);
      setErrors({ server: 'Erro ao conectar ao servidor.' });
    }
  };

  return (
    <Modal show={show} onHide={onHide} size="lg" aria-labelledby="contained-modal-title-vcenter" centered>
      <div className="modalBeleza">
        <Modal.Header closeButton>
          <Modal.Title id="contained-modal-title-vcenter">Cadastro de Cliente</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleCadastro} className='row'>
            <Form.Group className='col-12 col-md-6 col-lg-6' controlId="formNome">
              <Form.Label>Nome</Form.Label>
              <Form.Control
                type="text"
                placeholder="Digite seu nome"
                name="nome"
                value={formValues.nome}
                onChange={handleInputChange}
                isInvalid={!!errors.nome}
              />
              <Form.Control.Feedback type="invalid">{errors.nome}</Form.Control.Feedback>
            </Form.Group>

            <Form.Group className='col-12 col-md-6 col-lg-6' controlId="formEmail" >
              <Form.Label>Email</Form.Label>
              <Form.Control
                type="email"
                placeholder="Digite seu email"
                name="email"
                value={formValues.email}
                onChange={handleInputChange}
                isInvalid={!!errors.email}
              />
              <Form.Control.Feedback type="invalid">{errors.email}</Form.Control.Feedback>
            </Form.Group>

            <Form.Group className='col-12 col-md-6 col-lg-6' controlId="formTelefone" >
              <Form.Label>Telefone</Form.Label>
              <Form.Control
                type="text"
                placeholder="Digite seu telefone"
                name="telefone"
                value={formValues.telefone}
                onChange={handleInputChange}
                isInvalid={!!errors.telefone}
              />
              <Form.Control.Feedback type="invalid">{errors.telefone}</Form.Control.Feedback>
            </Form.Group>

            <Form.Group className='col-12 col-md-6 col-lg-6' controlId="formEndereco" >
              <Form.Label>Endereço</Form.Label>
              <Form.Control
                type="text"
                placeholder="Digite seu endereço"
                name="endereco"
                value={formValues.endereco}
                onChange={handleInputChange}
                isInvalid={!!errors.endereco}
              />
              <Form.Control.Feedback type="invalid">{errors.endereco}</Form.Control.Feedback>
            </Form.Group>

            <Form.Group className='col-12 col-md-6 col-lg-6' controlId="formGenero">
              <Form.Label>Gênero</Form.Label>
              <Form.Control
                as="select"
                name="genero"
                value={formValues.genero}
                onChange={handleInputChange}
                isInvalid={!!errors.genero}
              >
                <option value="">Selecione seu gênero</option>
                <option value="Masculino">Masculino</option>
                <option value="Feminino">Feminino</option>
                <option value="Outro">Outro</option>
              </Form.Control>
              <Form.Control.Feedback type="invalid">{errors.genero}</Form.Control.Feedback>
            </Form.Group>

            <Form.Group className='col-12 col-md-6 col-lg-6' controlId="formDataNascimento">
              <Form.Label>Data de Nascimento</Form.Label>
              <Form.Control
                type="date"
                name="dataNascimento"
                value={formValues.dataNascimento}
                onChange={handleInputChange}
                isInvalid={!!errors.dataNascimento}
              />
              <Form.Control.Feedback type="invalid">{errors.dataNascimento}</Form.Control.Feedback>
            </Form.Group>

            <Form.Group className='col-12 col-md-6 col-lg-6' controlId="formPassword">
              <Form.Label>Senha</Form.Label>
              <div className="d-flex">
                <Form.Control
                  type={showPassword ? "text" : "password"}
                  placeholder="Digite sua senha"
                  name="password"
                  value={formValues.password}
                  onChange={handleInputChange}
                  isInvalid={!!errors.password}
                />
                <Button
                  variant="outline-secondary"
                  onClick={() => setShowPassword(!showPassword)}
                  className="ms-2"
                >
                  {showPassword ? "Ocultar" : "Mostrar"}
                </Button>
              </div>
              <Form.Control.Feedback type="invalid">{errors.password}</Form.Control.Feedback>
            </Form.Group>

            {errors.server && <div className="text-danger mt-2">{errors.server}</div>}

            <Button variant="primary" type="submit" className="links-acessos mt-3 px-5 mx-auto d-block">
              Cadastrar
            </Button>
          </Form>
        </Modal.Body>
      </div>
    </Modal>
  );
}

*/

